name: Build and Deploy Go REST API

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  GO_VERSION: '1.21'

jobs:
  # 테스트 및 빌드 작업
  test-and-build:
    runs-on: ubuntu-latest
    
    # 환경변수 설정 (GitHub Secrets 사용)
    env:
      DB_SERVER: ${{ secrets.DB_SERVER }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_NAME: ${{ secrets.DB_NAME }}
      API_KEY: ${{ secrets.API_KEY }}
    
    steps:
    # 코드 체크아웃
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Go 환경 설정
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    # Go 모듈 캐시
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    # 의존성 다운로드
    - name: Download dependencies
      run: go mod download
    
    # 코드 포맷 검사
    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly"
          gofmt -s -l .
          exit 1
        fi
    
    # 코드 린팅 (선택사항)
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        skip-cache: true
    
    # 애플리케이션 빌드
    - name: Build application
      run: |
        go build -v -o main .
        chmod +x main
    
    # 빌드된 파일을 아티팩트로 저장
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: go-rest-api
        path: |
          main
          go.mod
          go.sum
        retention-days: 5

  # Docker 이미지 빌드 (선택사항)
  docker-build:
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    # Docker Hub 로그인 (Docker Hub에 푸시하려는 경우)
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      if: github.event_name != 'pull_request'
    
    # Docker 이미지 빌드 및 푸시
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/go-rest-api:latest
          ${{ secrets.DOCKER_USERNAME }}/go-rest-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 서버 배포 (실제 서버가 있는 경우)
  deploy-to-server:
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/main'
    
    env:
      DB_SERVER: ${{ secrets.DB_SERVER }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_NAME: ${{ secrets.DB_NAME }}
      API_KEY: ${{ secrets.API_KEY }}
    
    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: go-rest-api
    
    # SSH를 통한 서버 배포 (서버가 있는 경우)
    - name: Deploy to server via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        envs: DB_SERVER,DB_USER,DB_PASSWORD,DB_PORT,DB_NAME,API_KEY
        script: |
          # 기존 프로세스 종료
          pkill -f "go-rest-api" || true
          
          # 새 바이너리 복사 및 실행
          cd /opt/go-rest-api
          chmod +x main
          
          # 환경변수 설정하여 백그라운드 실행
          export DB_SERVER="$DB_SERVER"
          export DB_USER="$DB_USER"
          export DB_PASSWORD="$DB_PASSWORD"
          export DB_PORT="$DB_PORT"
          export DB_NAME="$DB_NAME"
          export API_KEY="$API_KEY"
          
          nohup ./main > app.log 2>&1 &
          
          # 서버 시작 확인
          sleep 5
          curl -f http://localhost:8000/health || exit 1

  # Railway 배포 (Railway 사용시)
  deploy-to-railway:
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Railway
      uses: railwayapp/railway-deploy@v2
      with:
        railway_token: ${{ secrets.RAILWAY_TOKEN }}
        service: 'go-rest-api'
      env:
        DB_SERVER: ${{ secrets.DB_SERVER }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_NAME: ${{ secrets.DB_NAME }}
        API_KEY: ${{ secrets.API_KEY }}

  # 알림 (선택사항)
  notify:
    runs-on: ubuntu-latest
    needs: [test-and-build, deploy-to-server]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()