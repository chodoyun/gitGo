name: Simple Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    env:
      DB_SERVER: ${{ secrets.DB_SERVER }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_NAME: ${{ secrets.DB_NAME }}
      API_KEY: ${{ secrets.API_KEY }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Install dependencies
      run: go mod download
    
    - name: Build
      run: go build -v ./...
    
    - name: Test build
      run: |
        go build -o main .
        echo "Build successful!"
    
    # 환경변수가 제대로 설정되었는지 확인 (실제 값은 출력하지 않음)
    - name: Verify environment variables
      run: |
        if [ -z "$DB_SERVER" ]; then echo "DB_SERVER not set"; exit 1; fi
        if [ -z "$DB_USER" ]; then echo "DB_USER not set"; exit 1; fi
        if [ -z "$DB_PASSWORD" ]; then echo "DB_PASSWORD not set"; exit 1; fi
        if [ -z "$DB_PORT" ]; then echo "DB_PORT not set"; exit 1; fi
        if [ -z "$DB_NAME" ]; then echo "DB_NAME not set"; exit 1; fi
        if [ -z "$API_KEY" ]; then echo "API_KEY not set"; exit 1; fi
        echo "All environment variables are set correctly"
    
    # DB 연결 테스트
    - name: Test database connection
      run: |
        # 서버 시작
        ./main &
        SERVER_PID=$!
        
        # 서버가 시작될 때까지 대기
        echo "Waiting for server to start..."
        for i in {1..30}; do
          if curl -s --connect-timeout 5 http://localhost:8000/health > /dev/null; then
            echo "Server is up!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "Server failed to start"
            if ps -p $SERVER_PID > /dev/null; then
              kill $SERVER_PID
            fi
            exit 1
          fi
          echo "Attempt $i: Waiting for server..."
          sleep 2
        done
        
        # 헬스체크 테스트
        if curl -s --connect-timeout 5 http://localhost:8000/health | grep -q "healthy"; then
          echo "Database connection test successful"
        else
          echo "Database connection test failed"
          if ps -p $SERVER_PID > /dev/null; then
            kill $SERVER_PID
          fi
          exit 1
        fi
        
        # 서버 종료
        if ps -p $SERVER_PID > /dev/null; then
          kill $SERVER_PID
        fi
